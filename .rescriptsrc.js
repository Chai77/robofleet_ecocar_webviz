const { edit, getPaths } = require('@rescripts/utilities');

// test a Webpack "test" rule against a string
const doTest = (test, matchStr) => {
    if (Symbol.iterator in test) {
        return Array.from(test).some(x => x.test(matchStr));
    } else if (test instanceof RegExp) {
        return test.test(matchStr);
    }
    throw new Error("Provided test was not an array or RegExp");
}

// determine if an object is a webpack rule that loads TypeScript
const isTsRule = obj => obj && obj.test && obj.loader && doTest(obj.test, "file.ts");

module.exports = [
    // disable warnings for code generated by Flatbuffers compiler
    ["use-eslint-config", {
        "extends": ["react-app"],
        "overrides": [
            {
                "files": ["**/*_generated.ts"],
                "rules": {
                    "no-redeclare": 0,
                    "@typescript-eslint/no-unused-vars": 0
                }
            }
        ]
    }],
    (config) => {
        // replace babel-loader with ts-loader for TypeScript
        config = edit(
            (rule) => {
                rule.loader = require.resolve("ts-loader");
                rule.options = {
                    // create-react-app will destroy anything it doesn't like in tsconfig.json
                    configFile: "tsconfig.tsc.json"
                };
                return rule;
            },
            getPaths(isTsRule, config),
            config,
        );
        return config;
    }
];
